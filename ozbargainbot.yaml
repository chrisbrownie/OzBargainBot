AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys OzBargainBot

Parameters:
  WebhookUrl:
    Type: String

  WebhookChannel:
    Type: String
    Default: OzBargain

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
  
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/ozbargainbot/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        -
          PolicyName: OzBargainBot-ReadWriteS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: 
                  - s3:ListBucket
                Resource: 
                  - !GetAtt S3Bucket.Arn
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: 
                  - Fn::Sub:
                    - "${s3BucketArn}/*"
                    - s3BucketArn: !GetAtt S3Bucket.Arn

  LambdaEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers the OzBargainBot Lambda
      ScheduleExpression: rate(5 minutes)
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: LambdaTarget

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Checks for hot bargains
      Handler: "index.handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          WEBHOOKURL: !Ref WebhookUrl
          WEBHOOKCHANNEL: !Ref WebhookChannel
          OZBBS3BUCKET: !Ref S3Bucket
      Code:
        ZipFile: |
          from datetime import datetime, timedelta
          import boto3
          import botocore
          import json
          import logging
          import os
          import sys
          import time
          import urllib
          import urllib2
          url = "https://www.ozbargain.com.au/api/live?last=%timestamp%&disable=comments%2Cvotes%2Cwiki&types=Ad%2CComp%2CForum"
          linkbase = "https://www.ozbargain.com.au"
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          s3 = boto3.resource('s3')

          def generateUrl(url, timestamp):
              return url.replace("%timestamp%", str(timestamp))

          def getDeals(url):
              webdata = urllib2.urlopen(url).read()
              items = json.loads(webdata)
              return items

          def sendWebHook(url, deal, webhook_channel):
              print deal["title"]
              print url
              payload = {
                  "channel": webhook_channel,
                  "username": "OzBargain",
                  "icon_url": "https://i2.wp.com/files.ozbargain.com.au/g/38.jpg?ssl=1",
                  "attachments": [
                      {
                              "text": deal["title"],
                              "fallback": deal["title"],
                              "callback_id": "deal",
                              "color": "#7F3F00",
                              "attachment_type": "default",
                              "actions": [
                                  {
                                      "text": "Go To Deal",
                                      "type": "button",
                                      "url": linkbase + deal["link"],
                                      "style": "primary"
                                  },
                                  {
                                      "name": "deal",
                                      "text": "More info",
                                      "type": "button",
                                      "value": "maze"
                                  }
                              ]
                      }
                  ]
              }
              print json.dumps(payload)
              try:
                  req = urllib2.Request(
                      url, json.dumps(payload), {'Content-Type': 'application/json'}
                  )
                  f = urllib2.urlopen(req)
                  response = f.read()
                  f.close()
              except urllib2.HTTPError as e:
                  print "Error!\n" + e.read()


          def getLastRequestTimeStamp(bucketName, keyName='ozbb.txt'):
              # Grabs the last request timestamp from a file in an S3 bucket
              try:
                object = s3.Object(bucketName, keyName).get()
                body = object['Body'].read()
                return body
              except:
                logger.info("Last request time not found, using 2 hours ago.")
                lastrequest = str(int(time.mktime(
                    (datetime.now() - timedelta(hours=2)).timetuple())))
                return lastrequest
              

          def putLastRequestTimeStamp(bucketName, timeStamp, keyName='ozbb.txt'):
              # Writes the last request timestamp to a file in an S3 bucket
              try:
                  s3.Object(bucketName, keyName).put(Body=str(timeStamp))
                  print timeStamp
                  return 0
              except:
                  raise
              

          def handler(event, context):
              webhook_url = os.environ['WEBHOOKURL']
              webhook_channel = os.environ['WEBHOOKCHANNEL']
              s3_bucket = os.environ['OZBBS3BUCKET']

              lastrequest = getLastRequestTimeStamp(bucketName=s3_bucket)

              parsedurl = generateUrl(url, lastrequest)
              dealdata = getDeals(parsedurl)
              newtimestamp = dealdata["timestamp"]
              deals = dealdata["records"]
              for deal in deals:
                  sendWebHook(webhook_url, deal, webhook_channel)
                  logger.info("Processed: " + str(deal["uid"]))
              putLastRequestTimeStamp(s3_bucket, newtimestamp)

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEvent.Arn

Outputs:

  BucketName:
    Value: !Ref S3Bucket